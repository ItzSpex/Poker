//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PokerClient.PokerServiceRef {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerResponseOfint", Namespace="http://schemas.datacontract.org/2004/07/PokerService")]
    [System.SerializableAttribute()]
    public partial class ServerResponseOfint : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerResponseOfArrayOfPokerTableBLPWeT4Jje", Namespace="http://schemas.datacontract.org/2004/07/PokerService")]
    [System.SerializableAttribute()]
    public partial class ServerResponseOfArrayOfPokerTableBLPWeT4Jje : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PokerClient.PokerServiceRef.PokerTableBL[] ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PokerClient.PokerServiceRef.PokerTableBL[] Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PokerTableBL", Namespace="http://schemas.datacontract.org/2004/07/PokerBL.Models")]
    [System.SerializableAttribute()]
    public partial class PokerTableBL : PokerClient.PokerServiceRef.PokerTable {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrTurnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasStartedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PokerClient.PokerServiceRef.Move[] MovesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumOfPlayersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PokerTableIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrTurn {
            get {
                return this.CurrTurnField;
            }
            set {
                if ((this.CurrTurnField.Equals(value) != true)) {
                    this.CurrTurnField = value;
                    this.RaisePropertyChanged("CurrTurn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasStarted {
            get {
                return this.HasStartedField;
            }
            set {
                if ((this.HasStartedField.Equals(value) != true)) {
                    this.HasStartedField = value;
                    this.RaisePropertyChanged("HasStarted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PokerClient.PokerServiceRef.Move[] Moves {
            get {
                return this.MovesField;
            }
            set {
                if ((object.ReferenceEquals(this.MovesField, value) != true)) {
                    this.MovesField = value;
                    this.RaisePropertyChanged("Moves");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumOfPlayers {
            get {
                return this.NumOfPlayersField;
            }
            set {
                if ((this.NumOfPlayersField.Equals(value) != true)) {
                    this.NumOfPlayersField = value;
                    this.RaisePropertyChanged("NumOfPlayers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PokerTableId {
            get {
                return this.PokerTableIdField;
            }
            set {
                if ((this.PokerTableIdField.Equals(value) != true)) {
                    this.PokerTableIdField = value;
                    this.RaisePropertyChanged("PokerTableId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/PokerDL.Models")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PokerClient.PokerServiceRef.BaseIdentityEntity))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PokerClient.PokerServiceRef.Move))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PokerClient.PokerServiceRef.PokerTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PokerClient.PokerServiceRef.PokerTableBL))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseIdentityEntity", Namespace="http://schemas.datacontract.org/2004/07/PokerDL.Models")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PokerClient.PokerServiceRef.Move))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PokerClient.PokerServiceRef.PokerTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PokerClient.PokerServiceRef.PokerTableBL))]
    public partial class BaseIdentityEntity : PokerClient.PokerServiceRef.BaseEntity {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Move", Namespace="http://schemas.datacontract.org/2004/07/PokerDL.Models")]
    [System.SerializableAttribute()]
    public partial class Move : PokerClient.PokerServiceRef.BaseIdentityEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BidAmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PokerClient.PokerServiceRef.Operation OperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PlayerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PokerTableIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BidAmount {
            get {
                return this.BidAmountField;
            }
            set {
                if ((this.BidAmountField.Equals(value) != true)) {
                    this.BidAmountField = value;
                    this.RaisePropertyChanged("BidAmount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PokerClient.PokerServiceRef.Operation Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((this.OperationField.Equals(value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PlayerId {
            get {
                return this.PlayerIdField;
            }
            set {
                if ((this.PlayerIdField.Equals(value) != true)) {
                    this.PlayerIdField = value;
                    this.RaisePropertyChanged("PlayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PokerTableId {
            get {
                return this.PokerTableIdField;
            }
            set {
                if ((this.PokerTableIdField.Equals(value) != true)) {
                    this.PokerTableIdField = value;
                    this.RaisePropertyChanged("PokerTableId");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PokerTable", Namespace="http://schemas.datacontract.org/2004/07/PokerBL.Models")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(PokerClient.PokerServiceRef.PokerTableBL))]
    public partial class PokerTable : PokerClient.PokerServiceRef.BaseIdentityEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DealerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FifthCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FourthCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MinBetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PokerTableNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecondCardField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TablePotField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThirdCardField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DealerId {
            get {
                return this.DealerIdField;
            }
            set {
                if ((this.DealerIdField.Equals(value) != true)) {
                    this.DealerIdField = value;
                    this.RaisePropertyChanged("DealerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FifthCard {
            get {
                return this.FifthCardField;
            }
            set {
                if ((object.ReferenceEquals(this.FifthCardField, value) != true)) {
                    this.FifthCardField = value;
                    this.RaisePropertyChanged("FifthCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstCard {
            get {
                return this.FirstCardField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstCardField, value) != true)) {
                    this.FirstCardField = value;
                    this.RaisePropertyChanged("FirstCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FourthCard {
            get {
                return this.FourthCardField;
            }
            set {
                if ((object.ReferenceEquals(this.FourthCardField, value) != true)) {
                    this.FourthCardField = value;
                    this.RaisePropertyChanged("FourthCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinBet {
            get {
                return this.MinBetField;
            }
            set {
                if ((this.MinBetField.Equals(value) != true)) {
                    this.MinBetField = value;
                    this.RaisePropertyChanged("MinBet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PokerTableName {
            get {
                return this.PokerTableNameField;
            }
            set {
                if ((object.ReferenceEquals(this.PokerTableNameField, value) != true)) {
                    this.PokerTableNameField = value;
                    this.RaisePropertyChanged("PokerTableName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecondCard {
            get {
                return this.SecondCardField;
            }
            set {
                if ((object.ReferenceEquals(this.SecondCardField, value) != true)) {
                    this.SecondCardField = value;
                    this.RaisePropertyChanged("SecondCard");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TablePot {
            get {
                return this.TablePotField;
            }
            set {
                if ((this.TablePotField.Equals(value) != true)) {
                    this.TablePotField = value;
                    this.RaisePropertyChanged("TablePot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ThirdCard {
            get {
                return this.ThirdCardField;
            }
            set {
                if ((object.ReferenceEquals(this.ThirdCardField, value) != true)) {
                    this.ThirdCardField = value;
                    this.RaisePropertyChanged("ThirdCard");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Operation", Namespace="http://schemas.datacontract.org/2004/07/PokerDL.Models")]
    public enum Operation : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Spectate = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Call = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Raise = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Fold = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Check = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerResponseOfboolean", Namespace="http://schemas.datacontract.org/2004/07/PokerService")]
    [System.SerializableAttribute()]
    public partial class ServerResponseOfboolean : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerResponseOfArrayOfstringuHEDJ7Dj", Namespace="http://schemas.datacontract.org/2004/07/PokerService")]
    [System.SerializableAttribute()]
    public partial class ServerResponseOfArrayOfstringuHEDJ7Dj : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerResponseOfArrayOfMovezbAl9a06", Namespace="http://schemas.datacontract.org/2004/07/PokerService")]
    [System.SerializableAttribute()]
    public partial class ServerResponseOfArrayOfMovezbAl9a06 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorMsgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private PokerClient.PokerServiceRef.Move[] ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMsg {
            get {
                return this.ErrorMsgField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMsgField, value) != true)) {
                    this.ErrorMsgField = value;
                    this.RaisePropertyChanged("ErrorMsg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public PokerClient.PokerServiceRef.Move[] Result {
            get {
                return this.ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultField, value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PokerServiceRef.IPokerService", SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IPokerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/SignUp", ReplyAction="http://tempuri.org/IPokerService/SignUpResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfint SignUp(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/SignUp", ReplyAction="http://tempuri.org/IPokerService/SignUpResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfint> SignUpAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/Login", ReplyAction="http://tempuri.org/IPokerService/LoginResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfint Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/Login", ReplyAction="http://tempuri.org/IPokerService/LoginResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfint> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/GetExistingTables", ReplyAction="http://tempuri.org/IPokerService/GetExistingTablesResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfArrayOfPokerTableBLPWeT4Jje GetExistingTables();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/GetExistingTables", ReplyAction="http://tempuri.org/IPokerService/GetExistingTablesResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfArrayOfPokerTableBLPWeT4Jje> GetExistingTablesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/CreateTable", ReplyAction="http://tempuri.org/IPokerService/CreateTableResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfboolean CreateTable(string PokerTableName, int NumOfPlayers, int MinBetAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/CreateTable", ReplyAction="http://tempuri.org/IPokerService/CreateTableResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> CreateTableAsync(string PokerTableName, int NumOfPlayers, int MinBetAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/LeaveTable", ReplyAction="http://tempuri.org/IPokerService/LeaveTableResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfboolean LeaveTable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/LeaveTable", ReplyAction="http://tempuri.org/IPokerService/LeaveTableResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> LeaveTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/CloseTable", ReplyAction="http://tempuri.org/IPokerService/CloseTableResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfboolean CloseTable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/CloseTable", ReplyAction="http://tempuri.org/IPokerService/CloseTableResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> CloseTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/JoinTable", ReplyAction="http://tempuri.org/IPokerService/JoinTableResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfboolean JoinTable(int TableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/JoinTable", ReplyAction="http://tempuri.org/IPokerService/JoinTableResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> JoinTableAsync(int TableId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/StartGame", ReplyAction="http://tempuri.org/IPokerService/StartGameResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfboolean StartGame();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/StartGame", ReplyAction="http://tempuri.org/IPokerService/StartGameResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> StartGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/GetCurrPlayerNames", ReplyAction="http://tempuri.org/IPokerService/GetCurrPlayerNamesResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfArrayOfstringuHEDJ7Dj GetCurrPlayerNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/GetCurrPlayerNames", ReplyAction="http://tempuri.org/IPokerService/GetCurrPlayerNamesResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfArrayOfstringuHEDJ7Dj> GetCurrPlayerNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/GetTableStatus", ReplyAction="http://tempuri.org/IPokerService/GetTableStatusResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfArrayOfMovezbAl9a06 GetTableStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/GetTableStatus", ReplyAction="http://tempuri.org/IPokerService/GetTableStatusResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfArrayOfMovezbAl9a06> GetTableStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/ExecuteMove", ReplyAction="http://tempuri.org/IPokerService/ExecuteMoveResponse")]
        PokerClient.PokerServiceRef.ServerResponseOfboolean ExecuteMove(PokerClient.PokerServiceRef.Operation Operation, int BidAmount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPokerService/ExecuteMove", ReplyAction="http://tempuri.org/IPokerService/ExecuteMoveResponse")]
        System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> ExecuteMoveAsync(PokerClient.PokerServiceRef.Operation Operation, int BidAmount);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPokerServiceChannel : PokerClient.PokerServiceRef.IPokerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PokerServiceClient : System.ServiceModel.ClientBase<PokerClient.PokerServiceRef.IPokerService>, PokerClient.PokerServiceRef.IPokerService {
        
        public PokerServiceClient() {
        }
        
        public PokerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PokerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PokerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PokerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfint SignUp(string username, string password) {
            return base.Channel.SignUp(username, password);
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfint> SignUpAsync(string username, string password) {
            return base.Channel.SignUpAsync(username, password);
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfint Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfint> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfArrayOfPokerTableBLPWeT4Jje GetExistingTables() {
            return base.Channel.GetExistingTables();
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfArrayOfPokerTableBLPWeT4Jje> GetExistingTablesAsync() {
            return base.Channel.GetExistingTablesAsync();
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfboolean CreateTable(string PokerTableName, int NumOfPlayers, int MinBetAmount) {
            return base.Channel.CreateTable(PokerTableName, NumOfPlayers, MinBetAmount);
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> CreateTableAsync(string PokerTableName, int NumOfPlayers, int MinBetAmount) {
            return base.Channel.CreateTableAsync(PokerTableName, NumOfPlayers, MinBetAmount);
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfboolean LeaveTable() {
            return base.Channel.LeaveTable();
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> LeaveTableAsync() {
            return base.Channel.LeaveTableAsync();
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfboolean CloseTable() {
            return base.Channel.CloseTable();
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> CloseTableAsync() {
            return base.Channel.CloseTableAsync();
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfboolean JoinTable(int TableId) {
            return base.Channel.JoinTable(TableId);
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> JoinTableAsync(int TableId) {
            return base.Channel.JoinTableAsync(TableId);
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfboolean StartGame() {
            return base.Channel.StartGame();
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> StartGameAsync() {
            return base.Channel.StartGameAsync();
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfArrayOfstringuHEDJ7Dj GetCurrPlayerNames() {
            return base.Channel.GetCurrPlayerNames();
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfArrayOfstringuHEDJ7Dj> GetCurrPlayerNamesAsync() {
            return base.Channel.GetCurrPlayerNamesAsync();
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfArrayOfMovezbAl9a06 GetTableStatus() {
            return base.Channel.GetTableStatus();
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfArrayOfMovezbAl9a06> GetTableStatusAsync() {
            return base.Channel.GetTableStatusAsync();
        }
        
        public PokerClient.PokerServiceRef.ServerResponseOfboolean ExecuteMove(PokerClient.PokerServiceRef.Operation Operation, int BidAmount) {
            return base.Channel.ExecuteMove(Operation, BidAmount);
        }
        
        public System.Threading.Tasks.Task<PokerClient.PokerServiceRef.ServerResponseOfboolean> ExecuteMoveAsync(PokerClient.PokerServiceRef.Operation Operation, int BidAmount) {
            return base.Channel.ExecuteMoveAsync(Operation, BidAmount);
        }
    }
}
